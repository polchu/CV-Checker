:- dynamic yes/1,no/1.
start :- condition(Disease),
      write('Patient may have: '),
      write(Disease),
      nl.
 
 % rules defined from the knowledge base, where the user is queried through all the facts and runs along the decision tree
condition(bronchitis) :-
    has(fever),
    has(cough),
    has(shortness_of_breath),
    has(chills),
    has(pain_or_pressure_in_chest_area),
    has(tiredness_or_fatigue),
    has(cough_producing_yellow/green_mucus).
    
condition(asthma) :-
    has(cough),
    has(shortness_of_breath),
    has(pain_or_pressure_in_chest_area),
    has(whistling/weezing_sound_when_coughing).

condition(coronavirus) :-
    has(fever),
    has(cough),
    has(shortness_of_breath),
    has(chills),
    has(muscle_pain_aches_or_discomfort),
    has(sore_throat),
    has(loss_of_taste_or_smell),
    has(trouble_breathing),
    has(pain_or_pressure_in_chest_area),
    has(blush_lips_or_face),
    has(tiredness_or_fatigue),
    has(congestion),
    has(diarrhea).

condition(pneumonia) :-
    has(fever),
    has(cough),
    has(shortness_of_breath),
    has(chills),
    has(muscle_pain_aches_or_discomfort),
    has(sore_throat),
    has(trouble_breathing),
    has(pain_or_pressure_in_chest_area),
    has(tiredness_or_fatigue).

condition(flu) :-
    has(fever),
    has(cough),
    has(muscle_pain_aches_or_discomfort),
    has(sore_throat),
    has(tiredness_or_fatigue),
    has(diarrhea).

condition(measles) :-
    has(fever),
    has(cough),   
    has(sore_throat),
    has(rashes_or_red_spots),
    has(red_or_watery_eyes).


condition(unknown) :-
    write("Cannot determine disease. Please contact your doctor for detailed checkup."),
    nl.

% rule that asks the user if they have the symptom, which would be the facts defined in every rule of the database.
ask(Question) :-
    write('Do you have the following symptom(s): '),
    write(Question),
    write('? '),
    read(Response),				$ take in user input as variable Response.
    nl,
   ( (Response == yes ; Response == y)	
      ->
       assert(yes(Question)) ;			$ if Response is equal to "yes" or "y" then the fact would be true
   (Response == no ; Response == n)
      ->
       assert(no(Question)), fail;		$ if Response is equal to "no" or "n" then the fact is not true and the program moves to the next branch in the decision tree
  
       write('Invalid Response: Please Say Yes or No to the question. '), nl,
       ask(Question)
	).

% rule that is affected by user input as the program is executed, 
% this rule is the backbone of the decision tree and determines the 
% traversal by determining the facts of every condition's rule and uses
% backtracking to ask about the verifiability of every disease
has(S) :-
   (yes(S)	$ if yes(S), then the fact is true
    ->
    true ;
    (no(S)	$ if no(S), then the fact is not true 
    ->
     fail ;
     ask(S))).
 
